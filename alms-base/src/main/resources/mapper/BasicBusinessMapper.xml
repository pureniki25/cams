<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hongte.alms.base.mapper.BasicBusinessMapper">

	<!-- 通用查询映射结果 -->
	<resultMap id="BaseResultMap" type="com.hongte.alms.base.entity.BasicBusiness">
		<id column="business_id" property="businessId" />
		<result column="input_time" property="inputTime" />
		<result column="business_type" property="businessType" />
		<result column="business_ctype" property="businessCtype" />
		<result column="business_stype" property="businessStype" />
		<result column="customer_name" property="customerName" />
		<result column="customer_identify_card" property="customerIdentifyCard" />
		<result column="repayment_type_id" property="repaymentTypeId" />
		<result column="borrow_money" property="borrowMoney" />
		<result column="borrow_limit" property="borrowLimit" />
		<result column="borrow_limit_unit" property="borrowLimitUnit" />
		<result column="borrow_rate" property="borrowRate" />
		<result column="borrow_rate_unit" property="borrowRateUnit" />
		<result column="original_userid" property="originalUserid" />
		<result column="original_name" property="originalName" />
		<result column="operator_id" property="operatorId" />
		<result column="operator_name" property="operatorName" />
		<result column="asset_id" property="assetId" />
		<result column="company_id" property="companyId" />
		<result column="company_name" property="companyName" />
		<result column="district_id" property="districtId" />
		<result column="district_name" property="districtName" />
		<result column="output_platform_id" property="outputPlatformId" />
		<result column="issue_split_type" property="issueSplitType" />
		<result column="source_type" property="sourceType" />
		<result column="source_business_id" property="sourceBusinessId" />
		<result column="is_tuandai_repay" property="isTuandaiRepay" />
		<result column="src_type" property="srcType" />
		<result column="create_time" property="createTime" />
		<result column="create_user" property="createUser" />
		<result column="update_time" property="updateTime" />
		<result column="update_user" property="updateUser" />
	</resultMap>

	<!-- 通用查询结果列 -->
	<sql id="Base_Column_List">
        business_id AS businessId, input_time AS inputTime, business_type AS businessType, business_ctype AS businessCtype, business_stype AS businessStype,  customer_name AS customerName, customer_identify_card AS customerIdentifyCard, repayment_type_id AS repaymentTypeId, borrow_money AS borrowMoney, borrow_limit AS borrowLimit, borrow_limit_unit AS borrowLimitUnit, borrow_rate AS borrowRate, borrow_rate_unit AS borrowRateUnit, original_userid AS originalUserid, original_name AS originalName, operator_id AS operatorId, operator_name AS operatorName, asset_id AS assetId, company_id AS companyId, company_name AS companyName, district_id AS districtId, district_name AS districtName, output_platform_id AS outputPlatformId, issue_split_type AS issueSplitType, source_type AS sourceType, source_business_id AS sourceBusinessId, is_tuandai_repay AS isTuandaiRepay, src_type AS srcType, create_time AS createTime, create_user AS createUser, update_time AS updateTime, update_user AS updateUser
    </sql>

	<!-- 查询申请减免界面业务基本信息内容 -->
	<select id="selectBusinessInfoForApplyDerateVo" resultType="com.hongte.alms.base.vo.module.BusinessInfoForApplyDerateVo">
		SELECT 
		  business.business_id AS businessId,
		  pList.business_id as zqBusinessId,
		  business.customer_name AS customerName,
		  business.company_id AS companyId,
		  company.area_name AS companyName,
		  business.business_type AS businessType,
		  b_type.business_type_name AS businessTypeName,
		  business.borrow_limit AS borrowLimit,
		  business.repayment_type_id AS repaymentTypeId,
		  -- sys_param.param_name AS repaymentTypeName,
		  business.borrow_rate AS borrowRate,
		  business.borrow_rate_unit AS borrowRateUnit,
		  business.borrow_money AS borrowMoney,
		  pList.period AS periods,
		  pList.after_Id AS afterId,
		  pList.overdue_days AS delayDays,
		  c.totalBorrowAmount AS totalBorrowAmount,
		  c.needPayPrincipal AS needPayPrincipal,
		  c.needPayInterest AS needPayInterest,
		  c.needPayPenalty AS needPayPenalty,
		  c.otherPayAmount AS otherPayAmount,
		  c.sumFactAmount AS sumFactAmount,
		  c.needPayService as needPayService,
		  b.getMoney AS getMoney ,
		  c.needPayGuarantee as needPayGuarantee,
		  c.needPayPlatform as needPayPlatform,
		  c.needPaydeposit as needPaydeposit,
		  c.needPayRush as needPayRush,
		  c.needPayAgency as needPayAgency,
		  c.totalFactAmount as totalFactAmount 
		  
		  
		FROM
		  tb_repayment_biz_plan_list AS pList 
		  LEFT JOIN tb_repayment_biz_plan AS plan 
		    ON pList.plan_id = plan.plan_id 
		  LEFT JOIN tb_basic_business AS business 
		    ON plan.original_business_id = business.business_id 
		  LEFT JOIN tb_basic_company AS company 
		    ON business.company_id = company.area_id 
		  LEFT JOIN tb_basic_business_type AS b_type 
		    ON business.business_type = b_type.business_type_id -- LEFT JOIN tb_sys_parameter as  sys_param ON business.repayment_type_id = sys_param.param_value
		  LEFT JOIN 
		    (SELECT 
		      t1.plan_list_id,
		      --   应还本金总额（应付本金 ）-->
		      SUM(
		        CASE
		          WHEN t1.plan_item_type = 10 
		          THEN t1.plan_amount 
		          ELSE 0 
		        END
		      ) AS `needPayPrincipal`,
		      --   应还利息总额（应付利息）-->
		      SUM(
		        CASE
		          WHEN t1.plan_item_type = 20 
		          THEN t1.plan_amount 
		          ELSE 0 
		        END
		      ) `needPayInterest`,
		      --   应还违约金总额（应付违约金 取应付的滞纳金）-->
		      SUM(
		        CASE
		          WHEN t1.plan_item_type = 60 
		          THEN t1.plan_amount 
		          ELSE 0 
		        END
		      ) `needPayPenalty`,
		      --   应还其他费用-->
		      SUM(
		        CASE
		          WHEN (
		            t1.plan_item_type != 60 
		            AND t1.plan_item_type != 20 
		            AND t1.plan_item_type != 10
		          ) 
		          THEN t1.plan_amount 
		          ELSE 0 
		        END
		      ) `otherPayAmount`,
		      
		             --   实收合计(不含本金部分)-->
		      SUM(
		        CASE
		          WHEN (
		            t1.plan_item_type != 10	         		       
		          ) 
		          THEN t1.fact_amount 
		          ELSE 0 
		        END
		      ) `sumFactAmount`,
		      	       	      --   应付平台费-->
		      	      
		      SUM(
		        CASE
		          WHEN (
		            t1.plan_item_type =50	         		       
		          ) 
		          THEN t1.fact_amount 
		          ELSE 0 
		        END
		      ) `needPayPlatform`,
		 
		      	           --   应付押金费-->
		     	SUM(
		        CASE
		          WHEN (
		            t1.plan_item_type =90	         		       
		          ) 
		          THEN t1.plan_amount 
		          ELSE 0 
		        END
		      ) `needPaydeposit`,
		      	 
		      	         --   应付冲应收-->
		       SUM(
		        CASE
		          WHEN (
		            t1.plan_item_type =100	         		       
		          ) 
		          THEN t1.plan_amount 
		          ELSE 0 
		        END
		      ) `needPayRush`,
		      	   
		      	            --   应付中介-->
		      	       	      	       	      
		      SUM(
		        CASE
		          WHEN (
		            t1.plan_item_type =80	         		       
		          ) 
		          THEN t1.plan_amount 
		          ELSE 0 
		        END
		      ) `needPayAgency`,
		      	   
		      	            --   应付担保费-->
		      	          	      
		      SUM(
		        CASE
		          WHEN (
		            t1.plan_item_type = 40	         		       
		          ) 
		          THEN t1.plan_amount 
		          ELSE 0 
		        END
		      ) `needPayGuarantee`,
		      	
		      	      
		      	          --   应付月收服务费-->
		      SUM(
		        CASE
		          WHEN (
		            t1.plan_item_type = 30 
		            or t1.plan_item_type = 50 
		      
		          ) 
		          THEN t1.plan_amount 
		          ELSE 0 
		        END
		      ) `needPayService`,
		      --   应还总额-->
		      SUM(t1.plan_amount) `totalBorrowAmount` ,
		          --   实还总额-->
		      SUM(t1.fact_amount) `totalFactAmount` 
		    FROM
		      tb_repayment_biz_plan_list_detail t1 
		    WHERE t1.plan_list_id = #{crpId,jdbcType=VARCHAR} 
		    GROUP BY t1.plan_list_id) c 
		    ON pList.plan_list_id = c.plan_list_id 
		  LEFT JOIN 
		    (--   出款金额 -->
		 	  SELECT 
		      a.business_id,
		    sum(a.fact_output_money) getMoney 
		    FROM
		      tb_biz_output_record a left join tb_repayment_biz_plan a2 on a.business_id=a2.original_business_id
		    WHERE 
	 a.business_id=#{originalBusinessId,jdbcType=VARCHAR}   and   a2.is_defer=#{isDefer} ) b 
		    ON business.business_id = b.business_id 
		WHERE pList.plan_list_id = #{crpId,jdbcType=VARCHAR}
    </select>

	<select id="queryPayedPrincipal" resultType="java.lang.Double">
    	SELECT 
		  SUM(
		    CASE
		      WHEN pdetail.plan_item_type = 10 
		      THEN pdetail.fact_amount 
		      ELSE 0 
		    END
		  ) AS `payedPrincipal`,	--   已还本金
		  rp.original_business_id AS `original_business_id` 
		FROM
		  tb_repayment_biz_plan_list_detail pdetail 
		  LEFT JOIN tb_repayment_biz_plan_list l 
		    ON pdetail.plan_list_id = l.plan_list_id 
		  LEFT JOIN tb_repayment_biz_plan rp 
		    ON rp.plan_id = l.plan_id 
		WHERE pdetail.fact_repay_date IS NOT NULL 
		  AND rp.original_business_id = #{businessId,jdbcType=VARCHAR} 
		GROUP BY rp.original_business_id 
    </select>

	<!-- 查询用户可访问的业务几个字段信息  -->
	<select id="selectUserPermissionBusinessDtos" resultType="com.hongte.alms.base.dto.UserPermissionBusinessDto">
		select company_id as CompanyId,
		business_id as businessId
		FROM  tb_basic_business WHERE
		1=1
		<if test="companyIds !=null">
			AND  company_id IN
			<foreach collection="companyIds" item="companyId" index="index"
					 open="(" close=")" separator=",">
				#{companyId}
			</foreach>
		</if>
	</select>

    <select id="findBusinessIds" resultType="java.lang.String">
        select business_id as businessId
        from tb_basic_business
        WHERE 1=1
        <if test="companyId != null">
            AND company_id = #{companyId}
        </if>
        <if test="businessType != null">
            AND business_type = #{businessType}
        </if>
    </select>

    <select id="selectAllBusinessIds" resultType="java.lang.String">
        select business_id as businessId
        from tb_basic_business
        WHERE 1=1
    </select>


	<select id="selectBusinessIdsByBizType" resultType="java.lang.String">
		select business_id as businessId
		from tb_basic_business
		WHERE 1=1
		<if test="bizTypes !=null">
			AND  business_type IN
			<foreach collection="bizTypes" item="bizType" index="index"
					 open="(" close=")" separator=",">
				#{bizType}
			</foreach>
		</if>


	</select>



    <!-- 一次性收取的分公司费用 -->
	<select id="getPreCharge" resultType="java.lang.Double">
  select sum(fee+fee2+fee3) 
  from (
  	
	  /* 线上出款业务一次性收取服务费*/
	  select a.business_id,ifnull(sum(b.sub_company_charge),0) `fee`,
	  (ifnull(sum(b.guarantee_amount),0)+ifnull(sum(b.tuandai_amount),0)+ +ifnull(sum(b.freed_amount),0)+ifnull(sum(b.agency_amount),0)) `fee2`,
	  ifnull(sum(b.cooperative_td_com_amount),0) `fee3`
	  	  	  
	  from tb_basic_business a 
	  join tb_tuandai_project_info b on a.business_id = b.business_id
	  left join tb_renewal_business c on a.business_id = c.renewal_business_id
	  where a.business_id = #{original_business_id,jdbcType=VARCHAR} and a.output_platform_id=1 
	  and c.renewal_business_id is null and b.begin_time is not null
	  group by a.business_id
	  union all

	    /*线下出款业务一次性收取服务费*/
	  select t1.orig_business_id,sum(t3.plan_amount) `fee`, 0 as 'fee2',0 as 'fee3'
	  FROM tb_repayment_biz_plan_list t1
	  join tb_repayment_biz_plan t2 on t1.plan_id = t2.plan_id
	  join tb_repayment_biz_plan_list_detail t3 on t1.plan_list_id= t3.plan_list_id
	  join tb_basic_business t4 on t1.orig_business_id = t4.business_id
	  WHERE t1.orig_business_id = #{original_business_id,jdbcType=VARCHAR} 
	  AND IFNULL(t3.plan_item_type, 0) = 30 AND IFNULL(t1.repay_flag, 0) != 6 
	  AND ifnull(t1.period,0) =0 AND t2.is_defer=0 AND ifnull(t4.output_platform_id,0) = 0
	  group by t1.orig_business_id
  ) tab 
  group by tab.business_id
  
    </select>



	<!-- 期初收取的月收分公司服务费-->
	<select id="getPreFees" resultType="java.lang.Double">
			 SELECT 
  (case when t3.plan_amount>0
    then 0 else sum(t3.plan_amount) end ) `plan_amount`
  
 
        FROM
          tb_repayment_biz_plan_list t1,
          tb_repayment_biz_plan t2,
          tb_repayment_biz_plan_list_detail t3 
        WHERE t1.plan_id = t2.plan_id 
          AND t1.plan_list_id = t3.plan_list_id 
          AND t2.original_business_id = #{original_business_id,jdbcType=VARCHAR} 
          AND IFNULL(t3.plan_item_type, 0) = 30 
          AND IFNULL(t1.repay_flag, 0) != 6 
          AND t1.period !=0
          AND t2.is_defer=0
        GROUP BY t1.period
        ORDER BY t1.due_date
		  limit 1;
    </select>



	<!-- 期初收取的月收分公司服务费-->
	<select id="getPreFees" resultType="java.lang.Double">
			 SELECT 
  (case when t3.plan_amount>0
    then 0 else sum(t3.plan_amount) end ) `plan_amount`
  
 
        FROM
          tb_repayment_biz_plan_list t1,
          tb_repayment_biz_plan t2,
          tb_repayment_biz_plan_list_detail t3 
        WHERE t1.plan_id = t2.plan_id 
          AND t1.plan_list_id = t3.plan_list_id 
          AND t2.original_business_id = #{original_business_id,jdbcType=VARCHAR} 
          AND IFNULL(t3.plan_item_type, 0) = 30 
          AND IFNULL(t1.repay_flag, 0) != 6 
          AND t1.period !=0
          AND t2.is_defer=0
        GROUP BY t1.period
        ORDER BY t1.due_date
		  limit 1;
    </select>
	<!-- 结清最终缴纳的利息总额何应付月收服务费 -->
	<select id="getNeedPay" resultType="map">
	            
		select 
		
		   --   应还利息总额（应付利息）-->
		      SUM(
		        CASE
		          WHEN pDetail.plan_item_type = 20 
		          THEN pDetail.plan_amount 
		          ELSE 0 
		        END
		      ) `settleNeedPayInterest`,
		      	          --   应付月收服务费-->
		      SUM(
		        CASE
		          WHEN (
		            pDetail.plan_item_type = 30 
		            or pDetail.plan_item_type = 50 
		      
		          ) 
		          THEN pDetail.plan_amount 
		          ELSE 0 
		        END
		      ) `settleNeedPayService`
		from 

		tb_repayment_biz_plan_list_detail pDetail

		left join tb_repayment_biz_plan_list pList on
		pList.plan_list_id=pDetail.plan_list_id
		left join tb_repayment_biz_plan plan on pList.plan_id=plan.plan_id
		where plan.original_business_id=#{original_business_id} and pList.current_status!='已还款'
	</select>




	<!-- 结清最终缴纳的金额 -->
	<select id="getSettleTotalFactSum" resultType="java.lang.Double">
	            	--    结清最终缴纳的金额-->
		select sum(pDetail.fact_amount) as totalFactSum 
		
		from 

		tb_repayment_biz_plan_list_detail pDetail

		left join tb_repayment_biz_plan_list pList on
		pList.plan_list_id=pDetail.plan_list_id
		left join tb_repayment_biz_plan plan on pList.plan_id=plan.plan_id


		where  plan.original_business_id=#{original_business_id}
	</select>
	<!-- 月收平台费服务费-->
	<select id="getMonthPlatformAmount" resultType="java.lang.Double">
				select 

	 ifnull(sum(pDetail.plan_amount),0)
		   from


		tb_repayment_biz_plan_list_detail pDetail

		left join tb_repayment_biz_plan_list pList on
		pList.plan_list_id=pDetail.plan_list_id

			left join tb_repayment_biz_plan plan on pList.plan_id=plan.plan_id

		where pList.plan_list_id=#{crpId,jdbcType=VARCHAR} and pDetail.plan_item_type = 50 limit 1
	</select>

	<!-- 月收平台费服务费-->
	<select id="getMonthPlatformAmountCount" resultType="java.lang.Integer">
				select 

            count(1)
		   from


		tb_repayment_biz_plan_list_detail pDetail

		left join tb_repayment_biz_plan_list pList on
		pList.plan_list_id=pDetail.plan_list_id

			left join tb_repayment_biz_plan plan on pList.plan_id=plan.plan_id

		where pList.plan_list_id=#{crpId,jdbcType=VARCHAR} and pDetail.plan_item_type = 50 limit 1
	</select>


	<!-- 月收分公司服务费-->
	<select id="getMonthCompanyAmount" resultType="java.lang.Double">
		
		select 

	sum(pDetail.plan_amount)
		   from


		tb_repayment_biz_plan_list_detail pDetail

		left join tb_repayment_biz_plan_list pList on
		pList.plan_list_id=pDetail.plan_list_id

			left join tb_repayment_biz_plan plan on pList.plan_id=plan.plan_id

		where pList.plan_list_id=#{crpId,jdbcType=VARCHAR}  and pDetail.plan_item_type = 30  limit 1
	</select>






	<!-- 月收等费用总额-->
	<select id="getMonthSumFactAmount" resultType="java.lang.Double">
		select 
--   出款后已交月收等费用总额：还款计划中的实收合计（不含本金部分） -->
		      SUM(
		        CASE
		          WHEN pDetail.plan_item_type != 10 
		          THEN pDetail.fact_amount 
		          ELSE 0 
		        END
		      ) AS `sumFactAmount` from


		tb_repayment_biz_plan_list_detail pDetail

		left join tb_repayment_biz_plan_list pList on
		pList.plan_list_id=pDetail.plan_list_id

			left join tb_repayment_biz_plan plan on pList.plan_id=plan.plan_id

		where plan.original_business_id=#{original_business_id}
	</select>

	<select id="queryFiveLevelClassify" resultType="java.lang.String">
		SELECT 
		  DISTINCT t1.`business_id`
		FROM
		  tb_basic_business t1,
		  tb_repayment_biz_plan_list t2 
		WHERE t1.`business_id` = t2.`orig_business_id` 
		AND t2.`current_status` != '已还款'
		AND IFNULL(t2.`repay_flag`,0) != 6
	</select>

	<!-- 月收等费用总额-->
	<select id="getMonthSumFactAmount" resultType="java.lang.Double">
		select 
--   出款后已交月收等费用总额：还款计划中的实收合计（不含本金部分） -->
		      SUM(
		        CASE
		          WHEN pDetail.plan_item_type != 10 
		          THEN pDetail.fact_amount 
		          ELSE 0 
		        END
		      ) AS `sumFactAmount` from


		tb_repayment_biz_plan_list_detail pDetail

		left join tb_repayment_biz_plan_list pList on
		pList.plan_list_id=pDetail.plan_list_id

			left join tb_repayment_biz_plan plan on pList.plan_id=plan.plan_id

		where plan.original_business_id=#{original_business_id}
	</select>

	<!-- 获取展期的借款期数-->
	<select id="getBorrowLlimitZQ" resultType="java.lang.Integer">
	select count(1)-1 as borrowLimit from 
	
	tb_repayment_biz_plan_list where plan_id=( select plan_id from  tb_repayment_biz_plan_list where plan_list_id=#{crpId,jdbcType=VARCHAR} )

	</select>

	<!-- 获取线上逾期费和线下逾期费-->
	<select id="getOverDueMoney" resultType="map">
			select sum((case when pDetail.fee_id=#{onLineFeeId,jdbcType=VARCHAR} then (ifnull(pDetail.plan_amount,0)-ifnull(pDetail.fact_amount,0)) else 0 end )) as onLineOverDueMoney, 
		 sum((case when pDetail.fee_id=#{underLineFeeId,jdbcType=VARCHAR} then (ifnull(pDetail.plan_amount,0)-ifnull(pDetail.fact_amount,0)) else 0 end )) as underLineOverDueMoney,
		  sum((case when pDetail.fee_id=#{underLineFeeId,jdbcType=VARCHAR} then (ifnull(pDetail.plan_amount,0)-ifnull(pDetail.fact_amount,0)) else 0 end )) as underLineFactOverDueMoney
		from tb_repayment_biz_plan_list pList 
		
		left join tb_repayment_biz_plan_list_detail pDetail
		
		on pList.plan_list_id=pDetail.plan_list_id
		
		where pDetail.plan_list_id=#{crpId,jdbcType=VARCHAR}
	</select>


	<!-- 清算一分配信息 -->
	<select id="selectLiquidationOne" resultType="com.hongte.alms.base.vo.module.LiquidationVO">
	
		SELECT (@rowNum:=@rowNum+1) as rowNo,c_log.collection_user AS liquidationOneId,user.user_name AS liquidationOneName,c_log.`describe` as `describe`, c_status.set_Way AS setWay,c_log.create_time AS setTime
		FROM tb_collection_status c_status
		LEFT JOIN tb_collection_log c_log ON c_status.crp_id=c_log.crp_id
		LEFT JOIN tb_sys_user user ON user.user_id=c_log.collection_user,
		(Select (@rowNum :=0) ) b
		
		where c_status.collection_status=1 and c_status.phone_staff is not null
		
		and c_status.crp_id=#{crpId,jdbcType=VARCHAR}

		
    </select>


	<!-- 清算二分配信息 -->
	<select id="selectLiquidationTwo" resultType="com.hongte.alms.base.vo.module.LiquidationVO">
	
		
		SELECT (@rowNum:=@rowNum+1) as rowNo,c_log.collection_user AS liquidationTwoId,user.user_name AS liquidationTwoName,c_log.`describe` as `describe`, c_status.set_Way AS setWay,c_log.create_time AS setTime
		FROM tb_collection_status c_status
		LEFT JOIN tb_collection_log c_log ON c_status.crp_id=c_log.crp_id
		LEFT JOIN tb_sys_user user ON user.user_id=c_log.collection_user,
		(Select (@rowNum :=0) ) b
		
		where c_status.collection_status=50 and c_status.visit_staff is not null
		
		and c_status.crp_id=#{crpId,jdbcType=VARCHAR}

    </select>




	<!-- 移交法务房贷移交信息 -->
	<select id="selectLitigationHouseVO" resultType="com.hongte.alms.base.vo.module.LitigationVO">
	
			select (@rowNum:=@rowNum+1) as rowNo,user.user_name as operator,house.create_time as operatTime,
			
			house.second_pecuniary_condition as pecuniaryCondition,
			house.second_related_personnel as relatedPersonnel from tb_transfer_litigation_house house 
				
			left join tb_process process on house.process_id=process.process_id
			left join tb_sys_user user on user.user_id=house.create_user,
				(Select (@rowNum :=0) ) b
			
			
			where house.crp_id=#{crpId,jdbcType=VARCHAR}  and process.process_result=1 and process.`status`=2

    </select>


	<!-- 移交法务车贷移交信息 -->
	<select id="selectLitigationCarVO" resultType="com.hongte.alms.base.vo.module.LitigationVO">
	
				
			select (@rowNum:=@rowNum+1) as rowNo,  user.user_id=car.create_user
			 as operator,car.create_time as operatTime,
			
			car.car_condition as carCondition,
			car.alms_opinion as almsOpinion from tb_transfer_litigation_car car 
			left join tb_process process on car.process_id=process.process_id
			left join tb_sys_user user on user.user_id=car.create_user,
					(Select (@rowNum :=0) ) b
			where car.crp_id=#{crpId,jdbcType=VARCHAR} and process.process_result=1 and process.`status`=2
    </select>
    
    
    <select id="selectlPushBusiness" resultType="map">
		SELECT t1.confirm_log_id,t2.business_id,t2.source_business_id,t4.repayment_batch_id,t2.asset_id,t2.create_time,t2.create_user,t2.company_id,t2.company_name,
		t2.business_type,t3.business_type_name,
		CASE WHEN t2.business_ctype = '小微企业贷用信' THEN '小微企业贷' ELSE t2.business_ctype END  AS 'business_ctype',
		t2.customer_name,t2.asset_id,
		CASE WHEN t1.type= 2 THEN '3' ELSE '2' END  AS 'action_id',
		CASE WHEN t4.plan_status= 10 THEN '3' WHEN t4.plan_status= 20 THEN '31' WHEN t4.plan_status = 30 THEN '32' ELSE t4.plan_status END  AS 'plan_status',
		'1' as businessFlag,
		t6.project_from+1 as businessFrom
		FROM tb_repayment_confirm_log t1
		LEFT JOIN tb_basic_business t2 ON t1.business_id = t2.business_id
		LEFT JOIN tb_basic_business_type t3 ON t3.business_type_id = t2.business_type
		LEFT JOIN tb_repayment_biz_plan_list t5 ON t5.business_id = t1.business_id AND t5.after_id = t1.after_id
		LEFT JOIN tb_repayment_biz_plan t4 ON t5.plan_id = t4.plan_id 
		LEFT JOIN tb_tuandai_project_info t6 ON t6.business_id = t1.business_id AND t6.master_issue_id = t6.project_id
		<where>
		-- t1.type = 1 AND
		t2.src_type = 2 and
		t1.last_push_status in (0,2)
		<if test="businessId != null">
           <![CDATA[ and t1.business_id = #{businessId}]]>
        </if>
        <if test="confirmLogId != null">
           <![CDATA[ and t1.confirm_log_id = #{confirmLogId}]]>
        </if>
        <if test="afterId != null">
           <![CDATA[ and t1.after_id = #{afterId}]]>
        </if>
		</where>
    </select>

    <select id="selectlPushBusinessOnlineFlow" resultType="map">
		SELECT 
		t1.resource_id AS 'list_id',
		'' AS 'account_id',
		t1.repay_date AS 'account_time',
		t2.business_id AS 'business_id',
		t6.project_id AS 'issue_id',
		t2.after_id AS 'after_id',
		t2.business_id AS 'exhibition_id',
		t1.repay_amount AS 'amount',
		'0' AS 'balance',
		t4.bank_card AS 'bank_card_no',
		CASE WHEN t2.type= 2 THEN '3' ELSE '2' END AS 'action_id',
		1 AS 'in_out',
		t2.create_user AS 'create_user',
		t2.create_time AS 'create_time',
		t8.accountant_confirm_user_name AS 'operator',
		t1.is_cancelled AS 'status_flag',
		'贷后系统同步' AS 'remark',
		t4.remark AS 'memo',
		'1' AS 'business_flag',
		t1.repay_source,
		'' AS 'target_account_id',
		'' AS 'target_bank_card_no',
		t8.customer_name_ext AS 'customer_name',
		'' AS 'external_id',
		t8.business_type_name_ext AS 'business_type',
		t8.business_type_ext AS 'business_type_id',
		t8.company_id_ext AS 'branch_id',
		t8.company_name_ext AS 'branch_name',
		CONCAT('ALMS-',t1.confirm_log_id) AS 'batch_id',
		t2.update_user AS 'update_user',
		t2.update_time AS 'update_time',
		1 AS 'import_type',
		CONCAT('ALMS-',t1.resource_id) AS 'log_id',
		<![CDATA[ CASE 
			WHEN t1.repay_source = 10 THEN '1'
			WHEN t1.repay_source = 11 THEN '7'
			WHEN t1.repay_source = 20 && t4.bind_platform_id = 3 THEN '2'
			WHEN t1.repay_source = 21 && t4.bind_platform_id = 3 THEN '2'
			WHEN t1.repay_source = 20 && IFNULL(t4.bind_platform_id,0) = 0 THEN '3'
			WHEN t1.repay_source = 21 && IFNULL(t4.bind_platform_id,0) = 0 THEN '3'
			WHEN t1.repay_source = 30 THEN '4'
			WHEN t1.repay_source = 31 THEN '4'
			WHEN t1.repay_source = 40 THEN '5'
			WHEN t1.repay_source = 50 THEN '6'
			ELSE '1' END  AS 'repay_type'
		]]>, 
		t4.bank_name AS 'open_bank',
		t4.customer_name AS 'account_name',
		t6.project_from+1 AS 'business_from',
		t6.queryFullsuccessDate AS 'segmentation_date',
		'' AS main_type,
		t4.identity_card AS main_id,
		'' AS t_area_id,
		'' AS t_area_name
		FROM 
		tb_repayment_resource t1 
		LEFT JOIN tb_repayment_confirm_log t2 ON t1.confirm_log_id = t2.confirm_log_id
		LEFT JOIN tb_withholding_repayment_log t4 ON t4.log_id = t1.repay_source_ref_id
		LEFT JOIN tb_tuandai_project_info t6 ON t6.business_id = t1.business_id AND t6.master_issue_id = t6.project_id
		LEFT JOIN tb_repayment_biz_plan_list_synch t8 ON t8.business_id = t2.business_id AND t2.after_id = t8.after_id AND t2.period = t8.period
		WHERE t1.repay_source IN (20,30,31,21)
		AND t2.confirm_log_id = #{confirmLogId}
		ORDER BY t2.create_time
    </select>
    
    <select id="selectlPushBusinessOfflineFlow" resultType="map">
		SELECT
		t1.resource_id AS 'list_id',
		''  AS 'account_id',
		t3.trade_date AS 'account_time',
		t2.org_business_id AS 'business_id',
		t6.project_id AS 'issue_id',
		t2.after_id AS 'after_id',
		t2.business_id AS 'exhibition_id',
		t1.repay_amount AS 'amount',
		'0' AS 'balance',
		t10.repayment_id AS 'bank_card_no',
		CASE WHEN t2.type= 2 THEN '3' ELSE '2' END AS 'action_id',
		1 AS 'in_out',
		t2.create_user AS 'create_user',
		t2.create_time AS 'create_time',
		t8.accountant_confirm_user_name AS 'operator',
		t1.is_cancelled AS 'status_flag',
		'贷后系统同步' AS 'remark',
		t9.trade_remark AS 'memo',
		'1' AS 'business_flag',
		<![CDATA[ CASE 
			WHEN t1.repay_source = 10 THEN '1'
			WHEN t1.repay_source = 11 THEN '7'
			WHEN t1.repay_source = 30 THEN '4'
			WHEN t1.repay_source = 31 THEN '4'
			WHEN t1.repay_source = 40 THEN '5'
			WHEN t1.repay_source = 50 THEN '6'
			ELSE '1' END  AS 'repay_type'
		]]>,
		t10.repayment_name AS 'target_account_id',
		t10.repayment_id AS 'target_bank_card_no',
		t8.customer_name_ext AS 'customer_name',
		'' AS 'external_id',
		t8.business_type_name_ext AS 'business_type',
		t8.business_type_ext AS 'business_type_id',
		t8.company_id_ext AS 'branch_id',
		t8.company_name_ext AS 'branch_name',
		CONCAT('ALMS-',t1.confirm_log_id) AS 'batch_id',
		t2.update_user AS 'update_user',
		t2.update_time AS 'update_time',
		1 AS 'import_type',
		CONCAT('ALMS-',t1.resource_id) AS 'log_id',
		CASE WHEN t3.trade_type = '现金' THEN '现金' WHEN t3.trade_type = '刷卡' THEN '刷卡' ELSE t3.bank_account END AS 'account_name',
		t9.remit_bank AS 'open_bank',
		t6.project_from+1 AS 'business_from',
		t6.queryFullsuccessDate AS 'segmentation_date',
		t10.main_type,
		t10.main_id,
		t11.area_id AS t_area_id,
		t11.area_name AS t_area_name
		FROM 
		tb_repayment_resource t1 
		LEFT JOIN tb_repayment_confirm_log t2 ON t2.confirm_log_id = t1.confirm_log_id
		LEFT JOIN tb_money_pool_repayment t3 ON t1.repay_source_ref_id = t3.id  
		LEFT JOIN tb_tuandai_project_info t6 ON t6.business_id = t2.business_id AND t6.master_issue_id = t6.project_id
		LEFT JOIN tb_repayment_biz_plan_list_synch t8 ON t8.business_id = t2.business_id AND t2.after_id = t8.after_id AND t2.period = t8.period
		LEFT JOIN tb_money_pool t9 ON t3.money_pool_id = t9.money_pool_id
		LEFT JOIN tb_department_bank t10 ON t10.finance_name = t9.accept_bank  AND t8.company_id_ext = t10.dept_id
		LEFT JOIN `tb_basic_company` t11 ON t10.dept_id = t11.`area_id`
		WHERE t1.repay_source IN (10,11,40,50)
		AND t2.confirm_log_id = #{confirmLogId}
		ORDER BY t2.create_time;
    </select>
    
    <select id="selectlPushBusinessFlowItem" resultType="map">
		SELECT 
			'' AS 'id',
			t8.org_business_id AS 'business_id',
			t1.after_id AS 'after_id',
			t1.project_id AS 'issue_id',
			t6.business_after_guid AS 'batch_id',
			t1.fee_id AS 'fee_id',
			t1.plan_item_name AS 'fee_name',
			t1.fact_amount AS 'amount',
			t8.create_time AS 'account_time',
			t8.create_time AS 'account_date',
			t1.is_cancelled AS 'status_flag',
			t1.create_date AS 'create_time',
			t1.create_user AS 'create_user',
			t1.update_date AS 'update_time',
			t1.update_user AS 'update_user',
			0 AS 'register_type',
			t1.repay_source AS 'action_id',
			t1.business_id AS 'exhibition_id',
			t2.business_type_name_ext AS 'business_type',
			t2.business_type_ext AS 'business_type_id',
			t2.company_id_ext AS 'branch_id',
			t2.company_name_ext AS 'branch_name',
			t2.customer_name_ext AS 'customer_name',
			t6.project_from+1 AS 'business_from',
			t6.queryFullsuccessDate AS 'segmentation_date',
			t1.confirm_log_id AS 'log_id',
			'贷后系统同步' AS 'remark'
		FROM tb_repayment_proj_fact_repay t1
		LEFT JOIN tb_repayment_biz_plan_list_synch t2 ON t1.plan_list_id = t2.plan_list_id
		LEFT JOIN tb_tuandai_project_info t6 ON t6.business_id = t1.business_id AND t6.master_issue_id = t6.project_id
		LEFT JOIN tb_repayment_confirm_log t8 ON t8.confirm_log_id = t1.confirm_log_id
		WHERE 
		t1.repay_source_id = #{repaySourceId}
    </select>
    
    <insert id="addLastDayFlow" parameterType="map">
    	INSERT INTO tb_cams_flow (
			SELECT 
			t1.resource_id AS 'list_id(明细编号)',
			'' AS 'account_id(账户编号)',
			t2.create_time AS 'account_time(记账日期)',
			t2.business_id AS 'business_id(业务编号)',
			t6.project_id AS 'issue_id(标的id)',
			t2.after_id AS 'after_id(期数)',
			t2.business_id AS 'exhibition_id(展期编号)',
			t4.current_amount AS 'amount(记账金额)',
			'0' AS 'balance(账户余额)',
			t4.bank_card AS 'bank_card_no(银行账号) ',
			CONCAT('ALMS-',2) AS 'action_id(交易活动)',
			1 AS 'in_out(收支类型)',
			t2.create_user AS 'create_user(创建用户)',
			t2.create_time AS 'create_time(创建时间)',
			t8.accountant_confirm_user_name AS 'operator(经办人)',
			t1.is_cancelled AS 'status_flag(状态)',
			'贷后系统同步#{ew.syncDay1}-#{ew.syncDay2}' AS 'remark(备注)',
			'是' AS 'business_flag(是否业务交易明细)',
			t1.repay_source AS 'repay_type(还款类型)',   -- 10：线下转账，20：线下代扣，30：银行代扣,11:用往期结余还款   t4.bind_platform_id 代扣平台ID 5:银行代扣 3:宝付代扣 0或者null:易宝代扣
			'' AS 'target_account_id(目标账户编号)',
			'' AS 'target_bank_card_no(目标银行账号)',
			t8.customer_name_ext AS 'customer_name(客户名称)',
			'' AS 'external_id(外联id)',
			t8.business_type_name_ext AS 'business_type(业务类型)',
			t8.business_type_ext AS 'business_type_id(业务类型id)',
			t8.company_id_ext AS 'branch_id(分公司id)',
			t8.company_name_ext AS 'branch_name(分公司id)',
			CONCAT('ALMS-',t1.confirm_log_id) AS 'batch_id(批次号)',
			t2.update_user AS 'update_user(更新用户)',
			t2.update_time AS 'update_time(更新时间)',
			1 AS 'import_type(导入方式)',
			CONCAT('ALMS-',t1.resource_id) AS 'log_id(流水来源标识)',
			t4.bank_card AS 'account_name(账户名称)',
			t4.bank_name AS 'open_bank(开户行)',
			t6.plate_type AS 'business_from(所属资产端)',
			t6.queryFullsuccessDate AS 'segmentation_date(数据分割时间点)',
			'',
			''
			FROM 
			tb_repayment_resource t1 
			LEFT JOIN tb_repayment_confirm_log t2 ON t1.confirm_log_id = t2.confirm_log_id
			LEFT JOIN tb_withholding_repayment_log t4 ON t4.log_id = t1.repay_source_ref_id
			LEFT JOIN tb_tuandai_project_info t6 ON t6.business_id = t1.business_id AND t6.master_issue_id = t6.project_id
			LEFT JOIN tb_repayment_biz_plan_list_synch t8 ON t8.business_id = t2.business_id AND t2.after_id = t8.after_id AND t2.period = t8.period
			LEFT JOIN tb_basic_business t9 ON t9.business_id = t1.business_id
			WHERE t1.repay_source IN (20,30,31,21)
			AND t2.type = 1
			<![CDATA[ AND t2.create_time >= #{ew.syncDay1} AND t2.create_time < #{ew.syncDay2}]]>
			AND t9.src_type = 2
			ORDER BY t2.create_time
			)
    </insert>
    
    
    <insert id="addLastDayFlowItem" parameterType="map" >
    	INSERT INTO tb_cams_flow_item (
			SELECT 
			'' AS 'id',
			t1.business_id AS 'business_id',
			t1.after_id AS 'after_id',
			t1.project_id AS 'issue_id',
			CONCAT('ALMS-',t1.confirm_log_id) AS 'batch_id',
			t1.proj_plan_detail_repay_id AS 'fee_id(费用id)',
			t1.plan_item_name AS 'fee_name(费用名称)',
			t1.fact_amount AS 'amount(记账金额)',
			t8.create_time AS 'account_time(记账时间)',
			t8.create_time AS 'account_date(记账日期)',
			'0' AS 'status_flag(状态)',
			t1.create_date AS 'create_time(创建时间)',
			t1.create_user AS 'create_user(创建用户)',
			t1.update_date AS 'update_time(更新时间)',
			t1.update_user AS 'update_user(更新用户)',
			0 AS 'register_type(登记类型)',
			CONCAT('ALMS-',2) AS 'action_id(交易活动)',
			t1.business_id AS 'exhibition_id(展期编号)',
			t2.business_type_name_ext AS 'business_type(业务类型)',
			t2.business_type_ext AS 'business_type_id(业务类型id)',
			t2.company_id_ext AS 'branch_id(分公司id)',
			t2.company_name_ext AS 'branch_name(分公司id)',
			t2.customer_name_ext AS 'customer_name(客户名称)',
			t6.plate_type AS 'business_from(所属资产端)',
			t6.queryFullsuccessDate AS 'segmentation_date(数据分割时间点)',
			CONCAT('ALMS-',t1.repay_source_id) AS 'log_id(流水来源标识)',
			'贷后系统同步#{ew.syncDay1}-{ew.syncDay2}' AS 'remark(备注)'
		FROM tb_repayment_proj_fact_repay t1
		LEFT JOIN tb_repayment_biz_plan_list_synch t2 ON t1.plan_list_id = t2.plan_list_id
		LEFT JOIN tb_tuandai_project_info t6 ON t6.business_id = t1.business_id AND t6.master_issue_id = t6.project_id
		LEFT JOIN tb_repayment_proj_plan_list_detail t7 ON t7.proj_plan_detail_id = t1.proj_plan_detail_id
		LEFT JOIN tb_repayment_confirm_log t8 ON t8.confirm_log_id = t1.confirm_log_id
		LEFT JOIN tb_basic_business t9 ON t9.business_id = t1.business_id
		WHERE 
		AND t8.type = 1
		AND t9.src_type = 2
		<![CDATA[and t8.create_time >= #{ew.syncDay1} AND t8.create_time < #{ew.syncDay2}]]>
		)
    </insert>
    
    <delete id="deleteLastDayFlow">
    	DELETE FROM tb_cams_flow 
    	WHERE 
    	remark = #{syncDay1}
    </delete>
    
    <delete id="deleteLastDayFlowItem">
    	DELETE FROM tb_cams_flow_item WHERE remark = '贷后系统同步${syncDay1}-${syncDay2}';
    </delete>
    
    <select id="selectlPushFenFaBusiness" resultType="map">
		SELECT t1.log_id as confirm_log_id,t2.business_id,t2.source_business_id,t4.repayment_batch_id,t2.asset_id,t2.create_time,t2.create_user,t2.company_id,t2.company_name,
		t2.business_type,t3.business_type_name,t2.customer_name,t2.asset_id,
		'5'  AS 'action_id',
		'1' as businessFlag,
		'2' as businessFrom
		FROM tb_tdrepay_recharge_record t1
		LEFT JOIN tb_basic_business t2 ON t1.orig_business_id = t2.business_id
		LEFT JOIN tb_basic_business_type t3 ON t3.business_type_id = t2.business_type
		LEFT JOIN tb_repayment_biz_plan_list t5 ON t5.business_id = t1.orig_business_id AND t5.after_id = t1.after_id
		LEFT JOIN tb_repayment_biz_plan t4 ON t5.plan_id = t4.plan_id
		<where> 
		t2.src_type = 2
		and t1.is_valid = 1
		and t1.last_push_status in (0,2)
		<if test="businessId != null">
           <![CDATA[ and t1.orig_business_id = #{businessId}]]>
        </if>
        <if test="confirmLogId != null">
           <![CDATA[ and t1.log_id = #{confirmLogId}]]>
        </if>
		</where>
    </select>

    <select id="selectlPushBusinessFenFaFlow" resultType="map">
		SELECT 
		t1.log_id AS 'list_id',
		'' AS 'account_id',
		t1.create_time AS 'account_time',
		t1.orig_business_id AS 'business_id',
		t1.project_id AS 'issue_id',
		t1.after_id AS 'after_id',
		'' AS 'exhibition_id',
		t1.fact_repay_amount AS 'amount',
		'0' AS 'balance',
		t1.user_id AS 'bank_card_no ',
		'5' AS 'action_id',
		0 AS 'in_out',
		t1.create_user AS 'create_user',
		t1.create_time AS 'create_time',
		t1.create_user AS 'operator',
		t1.is_valid AS 'status_flag',
		'贷后系统同步' AS 'remark',
		'1' AS 'business_flag',
		'0' AS 'repay_type',
		'' AS 'target_account_id',
		'' AS 'target_bank_card_no',
		t1.customer_name AS 'customer_name',
		'' AS 'external_id',
		t1.business_type AS 'business_type',
		t1.business_type AS 'business_type_id',
		t8.company_id_ext AS 'branch_id',
		t8.company_name_ext AS 'branch_name',
		CONCAT('ALMS-',t1.batch_id) AS 'batch_id',
		t1.update_user AS 'update_user',
		t1.update_time AS 'update_time',
		1 AS 'import_type',
		CONCAT('ALMS-',t1.log_id) AS 'log_id',
		t1.user_id AS 'account_name',
		t1.user_id AS 'open_bank',
		t1.asset_type AS 'business_from',
		t6.queryFullsuccessDate AS 'segmentation_date'
		FROM 
		tb_tdrepay_recharge_record t1
		LEFT JOIN tb_tuandai_project_info t6 ON t6.business_id = t1.orig_business_id AND t6.master_issue_id = t6.project_id
		LEFT JOIN tb_repayment_biz_plan_list_synch t8 ON t8.business_id = t1.orig_business_id AND t1.after_id = t8.after_id AND t1.period = t8.period
		LEFT JOIN tb_basic_business t9 ON t9.business_id = t1.orig_business_id
		WHERE t1.is_valid = 1
		and t1.log_id = #{confirmLogId}
		and t1.last_push_status in (0,2)
		ORDER BY t1.create_time
    </select>
    
    <select id="selectlPushBusinessFenFaFlowItem" resultType="map">
		SELECT 
		'' AS 'id',
		t2.orig_business_id AS 'business_id',
		t2.after_id AS 'after_id',
		t2.project_id AS 'issue_id',
		CONCAT('ALMS-',t2.batch_id) AS 'batch_id',
		t1.id AS 'fee_id',
		t1.fee_name AS 'fee_name',
		t1.fee_value AS 'amount',
		t1.create_time AS 'account_time',
		t1.create_time AS 'account_date',
		'0' AS 'status_flag',
		t1.create_time AS 'create_time',
		t1.create_user AS 'create_user',
		t1.update_time AS 'update_time',
		t1.update_user AS 'update_user',
		0 AS 'register_type',
		'5' AS 'action_id',
		'' AS 'exhibition_id',
		t8.business_type_name_ext AS 'business_type',
		t8.business_type_ext AS 'business_type_id',
		t8.company_id_ext AS 'branch_id',
		t8.company_name_ext AS 'branch_name',
		t8.customer_name_ext AS 'customer_name',
		t2.asset_type AS 'business_from',
		t6.queryFullsuccessDate AS 'segmentation_date',
		CONCAT('ALMS-',t1.log_id) AS 'log_id',
		'贷后系统同步' AS 'remark'
		FROM tb_tdrepay_recharge_detail t1
		LEFT JOIN tb_tdrepay_recharge_record t2 ON t1.log_id = t2.log_id AND t2.is_valid = 1
		LEFT JOIN tb_tuandai_project_info t6 ON t6.business_id = t2.orig_business_id AND t6.master_issue_id = t6.project_id
		LEFT JOIN tb_repayment_biz_plan_list_synch t8 ON t8.business_id = t2.orig_business_id AND t2.after_id = t8.after_id AND t2.period = t8.period
		LEFT JOIN tb_basic_business t9 ON t9.business_id = t2.orig_business_id
		WHERE 
		t1.log_id = #{repaySourceId}
    </select>
    
    <select id="selectlCancelRepayFlow" resultType="map">
		SELECT 
		t1.business_id,
		t1.after_id,
		t6.queryFullsuccessDate,
		t1.confirm_log_id,
		t1.TYPE as flowType
		FROM 
		tb_repayment_confirm_log t1
		LEFT JOIN tb_tuandai_project_info t6 ON t6.business_id = t1.business_id AND t6.master_issue_id = t6.project_id
		WHERE t1.is_cancelled = 1 
		and last_push_status in (1,5)
    </select>
    
    <select id="selectlCancelFenFaFlow" resultType="map">
		SELECT 
		t1.orig_business_id as business_id,
		t1.after_id,
		t6.queryFullsuccessDate,
		t1.log_id as confirm_log_id,
		99 as flowType
		FROM 
		tb_tdrepay_recharge_record t1
		LEFT JOIN tb_tuandai_project_info t6 ON t6.business_id = t1.orig_business_id AND t6.master_issue_id = t6.project_id
		WHERE (is_valid = 1
		and last_push_status = 1) or (is_valid = 2
		and last_push_status = 5)
    </select>
</mapper>
